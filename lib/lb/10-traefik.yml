---
apiVersion: v1
kind: Service
metadata:
  name: traefik
  namespace: lb
spec:
  type: LoadBalancer
  selector:
    app: traefik
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
    - name: proxy
      protocol: TCP
      port: 443
      targetPort: 443
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-dashboard
  namespace: lb
  annotations:
    # We split traefik ports into two services so we can lockdown the dashboard
    # to internal requests (and then filter those through an auth proxy).
    # traefik.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8"
spec:
  type: ClusterIP
  selector:
    app: traefik
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik
  namespace: lb

---
# TODO(adam): notes from docs
# - store certs in kv? (Why not k8s Secret?)
#   - https://docs.traefik.io/configuration/acme/#as-a-key-value-store-entry
# - https://docs.traefik.io/configuration/commons/#custom-error-pages
apiVersion: v1
kind: ConfigMap
metadata:
  name: traefik-config
  namespace: lb
data:
  traefik.toml: |
      defaultEntryPoints = ["http","https"]
      # logging
      logLevel = "INFO"
      [file]
      watch = true
      [traefikLog]
      # filePath = "/path/to/traefik.log"
      # format   = "json"
      [accessLog]
      # filePath = "/path/to/access.log"
      # format   = "json
      [entryPoints]
      [entryPoints.http]
      address = ":80"
      compress = true
      [entryPoints.http.redirect]
      entryPoint = "https"
      [entryPoints.https]
      address = ":443"
      compress = true
      [entryPoints.https.tls]
      minVersion = "VersionTLS12"
      snistrict = true
      [entryPoints.traefik]
      address = ":8081"
      # Enable /ping
      [ping]
      entryPoint = "https"
      # Enable api / dashboard
      [api]
      dashboard = true
      # Let's Encrypt setup
      [acme]
      email = "security@moov.io"
      storage = "/opt/traefik/letsencrypt.json"
      entryPoint = "https"
      onDemand = true
      onHostRule = true
      # caServer = "https://acme-staging.api.letsencrypt.org/directory"
      caServer = "https://acme-v02.api.letsencrypt.org/directory"
      KeyType = "EC384"
      acmeLogging = true
      [acme.tlsChallenge]
      entryPoint = "http"
      [[acme.domains]]
      main = "api.moov.io"
      sans = ["infra.moov.io"]
      [kubernetes]
      namespaces = ["apps", "infra", "lb"]
      [metrics]
      [metrics.prometheus]
  nginx.conf: |
    daemon off;
    worker_processes  1;
    error_log  /var/log/nginx/error.log warn;
    # error_log /dev/stdout warn;
    pid       /var/run/nginx.pid;
    events {
      worker_connections  1024;
    }
    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;
      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
      '$status $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for"';

      access_log  /var/log/nginx/access.log  main;
      # access_log /dev/stdout main;
      sendfile        on;
      #tcp_nopush     on;
      keepalive_timeout 65;
      gzip  on;
      include /opt/nginx/conf.d/*.conf;
    }
  default.conf: |
    server {
      listen 8080;
      root /usr/share/nginx/www;
      index index.html index.htm;
      location /traefik/ {
        rewrite    /traefik/(.*) /$1 break;
        proxy_pass http://localhost:8081/;
      }
    }
  # metrics is for prometheus metrics scraping
  # (avoid error logs)
  metrics: |
    # no content
  index.html: |
    nginx - traefik

---
# Docs: https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: traefik-acme
  namespace: lb
spec:
  accessModes:
    - ReadWriteOnce # mountable only to a single node
  resources:
    requests:
      storage: 1Gi

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: traefik
  namespace: lb
  labels:
    app: traefik
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
    spec:
      serviceAccountName: traefik
      terminationGracePeriodSeconds: 30
      containers:
      - image: nginx:1.15
        imagePullPolicy: Always
        name: nginx
        args:
          - nginx
          - -c
          - /opt/nginx/nginx.conf
        volumeMounts:
          - name: nginx-conf
            mountPath: /opt/nginx/
          - name: nginx-temp
            mountPath: /var/cache/nginx/
          - name: nginx-www
            mountPath: /usr/share/nginx/www/
        ports:
          - containerPort: 8080
            name: http
            protocol: TCP
      - image: traefik:v1.7
        imagePullPolicy: Always
        name: traefik
        args:
          - --configFile=/etc/traefik/traefik.toml
        volumeMounts:
          - name: traefik-config
            mountPath: /etc/traefik/
          - name: traefik-acme
            mountPath: /opt/traefik/
        ports:
          - containerPort: 80
            name: proxy
            protocol: TCP
          - containerPort: 8081
            name: dashboard
            protocol: TCP
      volumes:
        - name: traefik-config
          configMap:
            name: traefik-config
            items:
              - key: traefik.toml
                path: traefik.toml
        - name: traefik-acme
          persistentVolumeClaim:
            claimName: traefik-acme
        - name: nginx-conf
          configMap:
            name: traefik-config
            items:
              - key: nginx.conf
                path: nginx.conf
              - key: default.conf
                path: conf.d/default.conf
        - name: nginx-temp
          emptyDir: {}
        - name: nginx-www
          configMap:
            name: traefik-config
            items:
              - key: metrics
                path: metrics
              - key: index.html
                path: index.html
      restartPolicy: Always

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik
rules:
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik
subjects:
  - kind: ServiceAccount
    name: traefik
    namespace: lb

---
