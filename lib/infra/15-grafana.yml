---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: infra
spec:
  type: ClusterIP
  selector:
    app: grafana
  ports:
    - name: http
      protocol: TCP
      port: 9090
      targetPort: 9090

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: infra

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: grafana
  namespace: infra
  annotations:
    kubernetes.io/ingress.class: traefik
    ingress.kubernetes.io/content-type-nosniff: "true"
    ingress.kubernetes.io/force-hsts: "true"
    ingress.kubernetes.io/hsts-max-age: "315360000"
    ingress.kubernetes.io/hsts-include-subdomains: "true"
    ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/ssl-host: "infra.moov.io"
    ingress.kubernetes.io/ssl-force-host: "true"
spec:
  rules:
    - host: infra.moov.io
      http:
        paths:
          - path: /grafana
            backend:
              serviceName: oauth2-proxy
              servicePort: 4180
              # serviceName: grafana
              # servicePort: 3000
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data
  namespace: infra
spec:
  accessModes:
    - ReadWriteOnce # mountable only to a single node
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: infra
data:
  nginx.conf: |
    daemon off;
    worker_processes  1;
    error_log  /var/log/nginx/error.log warn;
    # error_log /dev/stdout warn;
    pid       /var/run/nginx.pid;
    events {
      worker_connections  1024;
    }
    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;
      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
      '$status $body_bytes_sent "$http_referer" '
      '"$http_user_agent" "$http_x_forwarded_for"';

      access_log  /var/log/nginx/access.log  main;
      # access_log /dev/stdout main;
      sendfile        on;
      #tcp_nopush     on;
      keepalive_timeout 65;
      gzip  on;
      include /opt/nginx/conf.d/*.conf;
    }
  default.conf: |
    server {
      listen 9090;
      root /usr/share/nginx/www;
      index index.html index.htm;
      stub_status;
      location /grafana/ {
        proxy_pass http://localhost:3000/;
      }
    }
  # metrics is for prometheus metrics scraping
  # (avoid error logs)
  metrics: |
    # no content
  index.html: |
    nginx - grafana

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana
  namespace: infra
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      serviceAccountName: grafana
      terminationGracePeriodSeconds: 30
      containers:
      - image: nginx:1.17
        imagePullPolicy: Always
        name: nginx
        args:
          - nginx
          - -c
          - /opt/nginx/nginx.conf
        volumeMounts:
          - name: nginx-conf
            mountPath: /opt/nginx/
          - name: nginx-temp
            mountPath: /var/cache/nginx/
          - name: nginx-www
            mountPath: /usr/share/nginx/www/
        ports:
          - containerPort: 9090
            name: http
            protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 25m
            memory: 25Mi
      - image: nginx/nginx-prometheus-exporter:0.4.2
        imagePullPolicy: Always
        name: nginx-exporter
        args:
          - -nginx.scrape-uri=http://localhost:9090/stub_status
        ports:
          - containerPort: 9113
            name: metrics
            protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
      - image: grafana/grafana:6.5.1
        imagePullPolicy: Always
        name: grafana
        resources:
          limits:
            cpu: 50m
            memory: 50Mi
          requests:
            cpu: 25m
            memory: 50Mi
        env:
          - name: GF_PATHS_DATA
            value: /opt/grafana/
          - name: GF_SERVER_HTTP_PORT
            value: "3000"
          - name: GF_SERVER_PROTOCOL
            value: http
          - name: GF_SERVER_DOMAIN
            value: infra.moov.io
          # - name: GF_SERVER_ENFORCE_DOMAIN
          #   value: "true"
          - name: GF_SERVER_ROOT_URL
            # value: '%(protocol)s://%(domain)s:/grafana/'
            value: https://infra.moov.io/grafana/
          - name: GF_SREVER_ROUTER_LOGGING
            value: "true"
          - name: GF_DATABASE_TYPE
            value: sqlite3
          - name: GF_DATABASE_PATH
            value: /opt/grafana/grafana.db
          - name: GF_AUTH_BASIC_ENABLED
            value: "false"
          - name: GF_AUTH_DISABLE_LOGIN_FORM
            value: "true"
          - name: GF_AUTH_DISABLE_SIGNOUT_MENU
            value: "true"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true" # remember, security@moov.io
          # - name: GF_AUTH_ANONYMOUS_ORG_NAME
          #   value: moov
          - name: GF_AUTH_ANONYMOUS_ORG_ROLE
            value: Admin
          - name: GF_USERS_ALLOW_SIGN_UP
            value: "false"
          - name: GF_USERS_ALLOW_ORG_CREATE
            value: "false"
          - name: GF_USERS_AUTO_ASSIGN_ORG
            value: "true"
          - name: GF_USERS_AUTO_ASSIGN_ORG_ROLE
            value: "true"
          - name: GF_LOG_MODE
            value: console
          - name: GF_LOG_LEVEL
            value: debug
          - name: GF_METRICS_ENABLED
            value: "true"
          - name: GF_ALERTING_ENABLED
            value: "false"
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                name: grafana-secrets
                key: admin_user
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: grafana-secrets
                key: admin_password
          - name: GF_SECURITY_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: grafana-secrets
                key: secret_key
        volumeMounts:
          - name: grafana-data
            mountPath: /opt/grafana/
        ports:
          - containerPort: 3000
            name: http
            protocol: TCP
        securityContext:
          # From https://github.com/grafana/grafana/issues/13187
          runAsUser: 472
      volumes:
        - name: grafana-data
          persistentVolumeClaim:
            claimName: grafana-data
        - name: nginx-conf
          configMap:
            name: nginx-conf
            items:
              - key: nginx.conf
                path: nginx.conf
              - key: default.conf
                path: conf.d/default.conf
        - name: nginx-temp
          emptyDir: {}
        - name: nginx-www
          configMap:
            name: nginx-conf
            items:
              - key: metrics
                path: metrics
              - key: index.html
                path: index.html
      restartPolicy: Always

---
